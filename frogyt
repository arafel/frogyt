#!/usr/bin/python

import httplib2
import os
import sys
import json
import string
import logging
import ConfigParser
import argparse

try:
    from apiclient.discovery import build
except ImportError, e:
    print "Using local modules"
    ourpath = os.path.dirname(sys.argv[0]) + os.sep
    sys.path.insert(0, ourpath + "google-api-python-client")
    from apiclient.discovery import build

from oauth2client.file import Storage
from oauth2client.client import flow_from_clientsecrets
from oauth2client.tools import run

VERSION="0.0.1"

logger = None

options = { "log_debug" : False,
            "playlists_from_youtube": False,
            "storage": "%s-oauth2.json" % sys.argv[0],
            "dry_run": False }

def jsonprint(item):
    return json.dumps(item, indent=4, separators=(',', ': '))

# set log_to_stream to (e.g.) sys.stdout to log to stdout
def setup_logging(name, log_debug=False, log_to_stream=None):
    logger = logging.getLogger(name)
    if log_debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    # Create a file handler which even logs debug messages
    fh = logging.FileHandler(name + ".log")
    fh.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(funcName)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    logging.getLogger('').addHandler(fh)
    if log_to_stream:
        sh = logging.StreamHandler(log_to_stream)
        if log_debug:
            sh.setLevel(logging.DEBUG)
        else:
            sh.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(funcName)s - %(levelname)s - %(message)s')
        sh.setFormatter(formatter)
        logging.getLogger('').addHandler(sh)
    return logger

def get_youtube(options):
    # CLIENT_SECRETS_FILE, name of a file containing the OAuth 2.0 information for
    # this application, including client_id and client_secret. You can acquire an
    # ID/secret pair from the API Access tab on the Google APIs Console
    #   http://code.google.com/apis/console#access
    # For more information about using OAuth2 to access Google APIs, please visit:
    #   https://developers.google.com/accounts/docs/OAuth2
    # For more information about the client_secrets.json file format, please visit:
    #   https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
    # Please ensure that you have enabled the YouTube Data API for your project.
    CLIENT_SECRETS_FILE = "client_secrets.json"

    # Helpful message to display if the CLIENT_SECRETS_FILE is missing.
    MISSING_CLIENT_SECRETS_MESSAGE = """
    WARNING: Please configure OAuth 2.0

    To make this sample run you will need to populate the client_secrets.json file
    found at:

       %s

    with information from the APIs Console
    https://code.google.com/apis/console#access

    For more information about the client_secrets.json file format, please visit:
    https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
    """ % os.path.abspath(os.path.join(os.path.dirname(__file__),
                                       CLIENT_SECRETS_FILE))

    # An OAuth 2 access scope that allows for full read/write access.
    YOUTUBE_READ_WRITE_SCOPE = "https://www.googleapis.com/auth/youtube"
    YOUTUBE_API_SERVICE_NAME = "youtube"
    YOUTUBE_API_VERSION = "v3"

    flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE,
      message=MISSING_CLIENT_SECRETS_MESSAGE,
      scope=YOUTUBE_READ_WRITE_SCOPE)

    logger.debug("Using credentials file %s" % options["storage"])
    storage = Storage(options["storage"])
    credentials = storage.get()

    while 1:
        logger.debug("Starting auth loop")
        if credentials is None or credentials.invalid:
            logger.info("Invalid/no credentials, running auth flow")
            credentials = run(flow, storage)

        logger.debug("Building YouTube object with API %s, version %s" % \
                        (YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION))
        try:
            youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION,
              http=credentials.authorize(httplib2.Http()))
            break
        except AccessTokenRefreshError:
            logger.info("Access token has expired.")
            credentials.invalid

    return youtube

def apply_config(cfg, logger):
    # Process debug logging first so the other options get caught
    if cfg.has_option("frogyt", "log_debug"):
        logger.debug("Processing [%s, %s]" % ("frogyt", "log_debug"))
        options["log_debug"] = cfg.getboolean("frogyt", "log_debug")
        logger.debug("Set options.log_debug to " + options["log_debug"].__str__())
        if options["log_debug"]:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)

    # Now do the others
    for section in cfg.sections():
        for option in cfg.options(section):
            if section != "frogyt" or option != "log_debug":
                logger.debug("Processing [%s, %s]" % (section, option))
 

def load_config(logger):
    cfg = ConfigParser.SafeConfigParser()
    # Give precedence to more local files
    cfgfiles = cfg.read(["/etc/frogyt/frogyt.cfg", \
                            os.path.expanduser("~/.frogyt.cfg"), \
                            "frogyt.cfg"])
    if len(cfgfiles) > 0:
        logger.info("Parsed config from " + string.join(cfgfiles, ', '))
        apply_config(cfg, logger)
    else:
        logger.info("No config files to load, using defaults")
        print "No config files to load, using defaults"

    return cfg

def build_argument_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--playlists_from_youtube", help="Force frogyt to download playlists from YouTube rather than trying local cache", action="store_true")
    parser.add_argument("-c", "--credentials", help="Use this file for storing authorisation credentials")
    parser.add_argument("-d", "--debug", help="Enable debug level logging to log file", action="store_true")
    parser.add_argument("-t", "--testing", help="If in testing mode, no changes are made to YouTube playlists", action="store_true")
    parser.add_argument("playlists", metavar="playlist", nargs='+', help="playlists to process")
    return parser

def apply_args(args, options, logger):
    # Apply this first, so we catch any debug statements below
    if args.debug:
        options["log_debug"] = True
        logger.setLevel(logging.DEBUG)

    logger.info("Interesting arguments:")
    for arg in args.__dict__.keys():
        v = args.__dict__[arg]
        if v:
            logger.info("%s - %s" % (arg, v.__repr__()))
        else:
            logger.debug("%s - %s" % (arg, v.__repr__()))

    logger.debug("Argument dump:")
    logger.debug(args.__repr__())
    logger.debug("Options dump:")
    logger.debug(options.__repr__())

    if args.playlists_from_youtube:
        options["playlists_from_youtube"] = True
    if args.credentials:
        options["storage"] = args.storage
    if args.testing:
        options["dry_run"] = True

    if options["log_debug"]:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

def get_playlists(youtube):
    p = youtube.playlists()
    pagetoken = None
    totalresults = 0
    totalsofar = 0
    lastPage = False
    playlists = {}
    playlists_by_id = {}
    
    while True:
        # Get the response
        playlist_response = p.list(pageToken=pagetoken, part="snippet", mine=True, maxResults=50).execute()
    
        # Get housekeeping info from the response
        if playlist_response.has_key("nextPageToken"):
            pagetoken = playlist_response["nextPageToken"]
        else:
            print "No next page token, last page"
            lastPage = True
        pi = playlist_response["pageInfo"]
        if totalresults == 0:
            totalresults = pi["totalResults"]
        
        # Then process the items we wanted
        items = playlist_response["items"]
        totalsofar = totalsofar + len(items)
        for i in items:
            #print jsonprint(i)
            snippet = i["snippet"]
            title = snippet["title"]
            playlistid = i["id"]
            playlists[title] = playlistid
            playlists_by_id[playlistid] = title
            logger.debug("Playlist %s - id %s" % (title, playlistid))

        # Tell the user how we're doing
        print "Progress: %i/%i" % (totalsofar, totalresults)
        if totalsofar >= totalresults:
            print "Total so far (%i) >= totalresults (%i), break" % (totalsofar, totalresults)
            logger.info("Total so far (%i) >= totalresults (%i), break" % (totalsofar, totalresults))
            break
        if lastPage:
            print "Shouldn't reach this point"
            break

    return playlists, playlists_by_id

def get_playlist_items(videos_acc, duplicates_acc, playlists_by_id, playlist_id):
    p = youtube.playlistItems()
    pagetoken = None
    totalresults = 0
    totalsofar = 0
    new_count = 0
    duplicate_count = 0
    lastPage = False

    print "Processing playlist '%s'" % playlists_by_id[playlist_id]
    logger.info("Processing playlist '%s'" % (playlists_by_id[playlist_id]))
    logger.debug("Playlists '%s' has id %s" % (playlists_by_id[playlist_id], playlist_id))
    while True:
        playlist_response = p.list(pageToken=pagetoken, playlistId=playlist_id, part="snippet", maxResults=50).execute()

        # Get housekeeping info from the response
        if playlist_response.has_key("nextPageToken"):
            pagetoken = playlist_response["nextPageToken"]
        else:
            #print "No next page token, last page"
            lastPage = True
        pi = playlist_response["pageInfo"]
        if totalresults == 0:
            totalresults = pi["totalResults"]
 
        items = playlist_response["items"]
        totalsofar = totalsofar + len(items)
        for i in items:
            snippet = i["snippet"]
            title = snippet["title"]
            video_resource = snippet["resourceId"]
            video_id = video_resource["videoId"]
            
            if title == "Private video" and snippet["description"] == "This video is private":
                print "Private video."
                logger.debug("Declared video '%s' as private - video id %s" % (title, video_id))

            if videos_acc.has_key(video_id):
                print "Found duplicate entry '%s'" % (title)
                logger.info("Found duplicate entry '%s'" % (title))
                first_title, first_position, first_instance, first_playlist = videos_acc[video_id]
                print "\tFirst entry has position %i in playlist id %s" % (first_position, playlists_by_id[first_playlist])
                logger.info("\tFirst entry has position %i in playlist id %s" % (first_position, playlists_by_id[first_playlist]))
                logger.debug("\titem_id %s" % i["id"])
                duplicates_acc.append(i)
                duplicate_count = duplicate_count + 1
            else:
                logger.debug("Video '%s' (%s) is new" % (title, video_id))
                logger.debug("\titem_id %s" % i["id"])
                videos_acc[video_id] = (title, snippet["position"], i, playlist_id)
                new_count = new_count + 1

        # Tell the user how we're doing
        print "Progress: %i/%i" % (totalsofar, totalresults)
        if totalsofar >= totalresults:
            print "Total so far (%i) >= total results (%i), break" % (totalsofar, totalresults)
            logger.info("Total so far (%i) >= total results (%i), break" % (totalsofar, totalresults))
            break
        if lastPage:
            logger.debug("Shouldn't reach this point (lastPage)")
            break

    return new_count, duplicate_count

def convert_playlist_args(playlists, playlist_args):
    playlist_return = []

    lowercase_playlists = dict(map(lambda x: (string.lower(x), x), playlists.keys()))
    for playlist in playlist_args:
        playlist = string.lower(playlist)
        if not lowercase_playlists.has_key(playlist):
            print "Playlist '%s' not found." % playlist
            logger.info("Playlist '%s' not found." % playlist)
            continue
        else:
            playlist_return.append(lowercase_playlists[playlist])

    return playlist_return

if __name__ == "__main__":
    # Set up the logger as early as possible
    logger = setup_logging("frogyt", log_debug=options["log_debug"])
    logger.info("frogyt %s starting up" % VERSION)
    try:
        # Start from the config file
        load_config(logger)

        # Then see if there are any command-line options taking precedence
        parser = build_argument_parser()
        args = parser.parse_args()
        apply_args(args, options, logger)

        # Actually get a YouTube object to work with
        youtube = get_youtube(options)

        if options["playlists_from_youtube"]:
            print "Loading playlists from YouTube"
            playlists, playlists_by_id = get_playlists(youtube)
            open("playlists.json", "wb").write(json.dumps((playlists, playlists_by_id)))
        else:
            try:
                print "Trying to load playlists from JSON... ",
                playlists, playlists_by_id = json.load(open("playlists.json"))
                print "done."
            except:
                print "\nThat didn't work; dumping from YouTube."
                playlists, playlists_by_id = get_playlists(youtube)
                open("playlists.json", "wb").write(json.dumps((playlists, playlists_by_id)))

        print ""

        playlists_to_process = args.playlists
        playlists_to_process = convert_playlist_args(playlists, playlists_to_process)

        all_items = {}
        all_duplicates = []
        print "Playlists to process: %s" % (string.join(playlists_to_process, ", "))
        for playlist_title in playlists_to_process:
            # They should all exist after 'convert_playlist_args'
            print ""
            print "Requesting '%s' playlist" % playlist_title

            new_count, duplicate_count = get_playlist_items(all_items, all_duplicates, playlists_by_id, playlists[playlist_title])
            if (new_count + duplicate_count) == 0:
                print "Playlist '%s' was empty." % playlist_title
                continue

            if new_count > 0:
                print "Got %i items" % new_count
            if duplicate_count > 0:
                print "Got %i duplicates." % duplicate_count

        print ""
        print "Found %i non-duplicate items across %i playlists." % (len(all_items), len(playlists_to_process))
        logger.info("Found %i non-duplicate items across %i playlists." % (len(all_items), len(playlists_to_process)))

        if len(all_duplicates) > 0:
            p = youtube.playlistItems()
            print "Got %i duplicates" % len(all_duplicates)
            logger.info("Got %i duplicates" % len(all_duplicates))
            for d in all_duplicates:
                item_id = d["id"]
                if options["dry_run"]:
                    print "Deleting item '%s'" % (d["snippet"]["title"])
                    logger.info("Deleting item '%s'" % (d["snippet"]["title"]))
                    logger.debug("Item '%s' has id '%s'" % (d["snippet"]["title"], d["id"]))
                    p.delete(id=item_id).execute()
                else:
                    print "Would delete item '%s'" % (d["snippet"]["title"])
                    logger.info("Would delete item '%s'" % (d["snippet"]["title"]))
                    logger.debug("Item '%s' has id '%s'" % (d["snippet"]["title"], d["id"]))

    # Final exception handler, something we didn't expect went wrong.
    except Exception, e:
        # Final Exception catcher - don't let the user just see a crash.
        logger.critical("Uncaught exception", exc_info=1)
        print "Sorry - frogyt crashed. Please send frogyt.log to gribbit@blacksun.org.uk"

